{"version":3,"sources":["../../src/formatters/debug-formatter.js"],"names":["log","eventBroadcaster","eventDataCollector","colorFns","newScenarios","netLog","on","ev","result","logTestCase","testRun","formatterHelpers","formatSummary","testCaseMap","logNewScenarios","copyToNetlog","eventName","data","push","type","sourceLocation","status","Status","AMBIGUOUS","FAILED","logFullDetails","SKIPPED","PENDING","PASSED","logShort","pickle","testCase","getTestCaseData","bullet","statusCharacters","name","visitor","scenarioStatus","getAggregateStatus","getSteps","step","testStep","keyword","pickleStep","text","dataTable","docString","exception","errView","Object","create","stack","formatError","consoleLog","length","reduce","str","s","bold","red","cyan","steps"],"mappings":"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","file":"debug-formatter.js","sourcesContent":["import { Status, formatterHelpers } from 'cucumber';\nimport { createTestCaseVisitor } from '../lib/test-case-visitor';\nimport indent from 'indent-string';\nimport { statusCharacters } from './characters';\nimport { fence, formatDataTable, formatDocString, formatScenario } from '../lib/format';\n\nexport default function ({ log, eventBroadcaster, eventDataCollector, colorFns, newScenarios }) {\n  let netLog = null;\n\n  eventBroadcaster.on('test-case-started', () => {\n    netLog = [];\n  });\n\n  eventBroadcaster.on('test-case-finished', ev => {\n    ev.result.netLog = netLog;\n    netLog = null;\n\n    logTestCase(ev);\n  });\n\n  eventBroadcaster.on('test-run-finished', testRun => {\n    log('\\n');\n    log(formatterHelpers.formatSummary({\n      colorFns, testRun,\n      testCaseMap: eventDataCollector.testCaseMap,\n    }));\n\n    if (newScenarios)\n      logNewScenarios(newScenarios);\n  });\n\n  copyToNetlog('request');\n  copyToNetlog('response');\n\n  function copyToNetlog(eventName) {\n    eventBroadcaster.on(eventName, data => netLog.push({ type: eventName, data }));\n  }\n\n  function logTestCase({ result, sourceLocation }) {\n    switch (result.status) {\n      case Status.AMBIGUOUS:\n      case Status.FAILED:\n        logFullDetails(sourceLocation);\n        break;\n\n      case Status.SKIPPED:\n      case Status.PENDING:\n      case Status.PASSED:\n        logShort(sourceLocation);\n        break;\n\n      default:\n        logFullDetails(sourceLocation);\n        break;\n    }\n  }\n\n  function logShort(sourceLocation) {\n    const { pickle, testCase: { result: { status } } } = eventDataCollector.getTestCaseData(sourceLocation);\n    const bullet = statusCharacters[status];\n    log(colorFns[status](`${bullet} Scenario: ${pickle.name}\\n`));\n  }\n\n  function logFullDetails(sourceLocation) {\n    const visitor = createTestCaseVisitor(eventDataCollector.getTestCaseData(sourceLocation));\n\n    const scenarioStatus = getAggregateStatus(visitor.getSteps());\n    log(colorFns[scenarioStatus](`${statusCharacters[scenarioStatus]} Scenario: ${visitor.pickle.name}\\n`));\n\n    for (const step of visitor.getSteps()) {\n      const { result } = step.testStep;\n      log(colorFns[result.status](`  ${statusCharacters[result.status]} ${step.keyword}${step.pickleStep.text}\\n`));\n\n      if (step.dataTable)\n        log(indent(formatDataTable(step.dataTable), 8));\n      else if (step.docString)\n        log(indent(formatDocString(step.docString), 8));\n\n      if (result.exception) {\n        const errView = Object.create(result.exception);\n        errView.stack = null;\n        log(indent(formatterHelpers.formatError(errView, colorFns), 4));\n        log('\\n');\n      }\n    }\n    log(indent(fence('console log', visitor.testCase.result.consoleLog), 6));\n    log(indent(fence('request log', visitor.testCase.result.netLog), 6));\n    log('\\n');\n  }\n\n  function logNewScenarios() {\n    if (newScenarios.length) {\n      log(fence('new scenarios', newScenarios.reduce((str, s) => `${str}\\n${formatScenario(s)}`, '')));\n    } else {\n      log(colorFns.bold.red('\\nNo new scenarios found! '));\n      log(`Be sure to tag your new scenarios with ${colorFns.bold.cyan('@new')}.\\n`);\n    }\n  }\n}\n\nfunction getAggregateStatus(steps) {\n  let status = Status.PASSED;\n  for (const { testStep: { result } } of steps) {\n    switch (result.status) {\n      case Status.FAILED: return Status.FAILED;\n      case Status.PASSED: break;\n      default: status = result.status;\n    }\n  }\n\n  return status;\n}\n"]}