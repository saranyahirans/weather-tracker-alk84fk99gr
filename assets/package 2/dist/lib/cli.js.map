{"version":3,"sources":["../../src/lib/cli.js"],"names":["Bluebird","Cli","CucumberCli","constructor","options","cwd","cucumberArgs","stdout","argv","eventBroadcaster","EventEmitter","getSupportCodeLibrary","supportCodePaths","Object","defineProperties","supportCodeLibraryBuilder","methods","runner","enumerable","value","setupRunner","host","command","port","Runner","getConfiguration","builder","ConfigurationBuilder","featurePaths","stepPaths","getUnexpandedFeaturePaths","args","length","prototype","call","resolve","require","push","config","build","checkNew","formatOptions","newScenarios","findNewScenarios","debug","formats","type","score","filter","f","run","configuration","supportCodeLibrary","cleanup","initializeFormatters","testCases","pickleFilter","PickleFilter","pickleFilterOptions","runtime","Runtime","runtimeOptions","once","dryRun","result","success","start","precheck","runConfig","waitForServerUnavailable","err","ok","message","isStopping","abort","output","waitForServerAvailable","forceStop","log","stop","directories","Array","isArray","colors","colorFns","tag","exit","force","emit"],"mappings":"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","file":"cli.js","sourcesContent":["import {\n  Cli as CucumberCli,\n  supportCodeLibraryBuilder,\n  Runtime,\n  getTestCasesFromFilesystem,\n  PickleFilter,\n} from 'cucumber';\nimport ConfigurationBuilder from 'cucumber/lib/cli/configuration_builder';\nimport { Runner } from './runner';\nimport EventEmitter from 'events';\nimport { fence } from '../lib/format';\nimport * as Bluebird from 'bluebird';\nimport getPort from 'get-port';\nimport { findScenarios } from './scenario-location';\n\nexport class Cli extends CucumberCli {\n  constructor({ options, cwd, cucumberArgs, stdout  }) {\n    super({\n      cwd, stdout,\n      argv: [ null, '', ...cucumberArgs ],\n    });\n\n    this.options = options;\n    this.eventBroadcaster = new EventEmitter();\n  }\n\n  getSupportCodeLibrary(supportCodePaths) {\n    Object.defineProperties(supportCodeLibraryBuilder.methods, {\n      runner: {\n        enumerable: true,\n        value: this.runner,\n      },\n      eventBroadcaster: {\n        enumerable: true,\n        value: this.eventBroadcaster,\n      },\n    });\n\n    return super.getSupportCodeLibrary(supportCodePaths);\n  }\n\n  async setupRunner() {\n    if (this.runner) return;\n\n    const { host, command } = this.options;\n    let { port } = this.options;\n\n    if (!port)\n      port = await getPort({ host });\n\n    this.runner = new Runner({ host, port, command });\n  }\n\n  async getConfiguration() {\n    const builder = new ConfigurationBuilder({ argv: this.argv, cwd: this.cwd });\n\n    const { featurePaths, stepPaths } = this.options;\n    builder.getUnexpandedFeaturePaths = function () {\n      if (this.args.length > 0)\n        return ConfigurationBuilder.prototype.getUnexpandedFeaturePaths.call(this);\n      else\n        return Bluebird.resolve(featurePaths);\n    };\n\n    builder.options.require.push(...stepPaths);\n\n    const config = await builder.build();\n\n    if (this.options.checkNew) {\n      const featurePaths = typeof this.options.checkNew === 'string'\n        ? this.options.checkNew\n        : await builder.getUnexpandedFeaturePaths();\n\n      config.formatOptions.newScenarios = await this.findNewScenarios(featurePaths);\n    }\n\n    if (this.options.debug)\n      config.formats = [ { type: require.resolve('../formatters/debug-formatter') } ];\n\n    if (this.options.score)\n      config.formats.push({ type: require.resolve('../formatters/score-formatter') });\n    else\n      config.formats.push({ type: require.resolve('../formatters/strip-points-formatter') });\n\n    config.formats = config.formats.filter(f => f.type !== 'none');\n\n    return config;\n  }\n\n  async run() {\n    await this.setupRunner();\n\n    const configuration = await this.getConfiguration();\n    const supportCodeLibrary = this.getSupportCodeLibrary(configuration.supportCodePaths);\n\n    const cleanup = await this.initializeFormatters({\n      supportCodeLibrary,\n      eventBroadcaster: this.eventBroadcaster,\n      formatOptions: configuration.formatOptions,\n      formats: configuration.formats,\n    });\n\n    const testCases = getTestCasesFromFilesystem({\n      cwd: this.cwd,\n      eventBroadcaster: this.eventBroadcaster,\n      featurePaths: configuration.featurePaths,\n      pickleFilter: new PickleFilter(configuration.pickleFilterOptions),\n    });\n\n    const runtime = new Runtime({\n      eventBroadcaster: this.eventBroadcaster,\n      options: configuration.runtimeOptions,\n      supportCodeLibrary,\n      testCases,\n    });\n\n    this.eventBroadcaster.once('abort', () => {\n      configuration.runtimeOptions.dryRun = true;\n      runtime.result.success = false;\n    });\n\n    try {\n      await runtime.start();\n    } finally {\n      await cleanup();\n    }\n  }\n\n  async precheck() {\n    await this.setupRunner();\n\n    const { host, port } = this.runner.runConfig;\n\n    try {\n      await this.runner.waitForServerUnavailable();\n    } catch (err) {\n      return {\n        ok: false,\n        message: `${host}:${port} appears to be in use. Cannot start tests.`,\n      };\n    }\n\n    if (this.runner.isStopping)\n      return { abort: true };\n\n    const output = this.runner.start();\n    try {\n      await this.runner.waitForServerAvailable();\n    } catch (err) {\n      await this.runner.forceStop();\n      const log = await output;\n      return {\n        ok: false,\n        message: `Could not connect to ${host}:${port}\n${fence('console log', log)}`,\n      };\n    }\n\n    await this.runner.stop();\n\n    return { ok: true };\n  }\n\n  async findNewScenarios(directories) {\n    return findScenarios({\n      cwd: this.cwd,\n      directories: Array.isArray(directories) ? directories : [ directories ],\n      colors: this.colorFns,\n      tag: '@new',\n    });\n  }\n\n  exit({ force }) {\n    this.eventBroadcaster.emit('abort');\n\n    if (force)\n      return this.runner.forceStop();\n    else\n      return this.runner.stop();\n  }\n}\n\n"]}