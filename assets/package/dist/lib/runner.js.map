{"version":3,"sources":["../../src/lib/runner.js"],"names":["log","connectAttempts","connectDelayMS","connectTimeoutDelay","signalWaitTime","Runner","maxConnectTimeout","constructor","runConfig","start","command","host","port","env","PATH","process","DEBUG","NODE_DEBUG","PORT","HOST","APPDATA","child","spawn","detached","platform","stdio","once","code","signal","pid","isStopping","getMergedOutputs","stop","exitPromise","Bluebird","resolve","signalEscalations","timeout","catchReturn","Error","forceStop","length","waitForServerAvailable","remaining","ok","socket","connect","end","delay","waitForServerUnavailable","cmd","opts","proc","args","setTimeout","error","out","PassThrough","stdout","pipe","stderr"],"mappings":"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","file":"runner.js","sourcesContent":["import { createConnection } from 'net';\nimport libSpawn from 'cross-spawn';\nimport Bluebird from 'bluebird';\nimport debug from 'debug';\nimport { PassThrough } from 'stream';\nimport getStream from 'get-stream';\nimport { parse as parseShellCommand } from 'shell-quote';\nimport { signalEscalations } from './signals';\n\nconst log = debug('take-home-tester:child-process');\n\nconst connectAttempts = 10;\nconst connectDelayMS = 1000;\nconst connectTimeoutDelay = 200;\n\nconst signalWaitTime = 1000;\n\nexport class Runner {\n  static get maxConnectTimeout() {\n    return connectAttempts * (connectDelayMS + connectTimeoutDelay);\n  }\n\n  constructor(runConfig) {\n    this.runConfig = runConfig;\n  }\n\n  start() {\n    const { command, host, port } = this.runConfig;\n\n    const env = {\n      PATH: process.env.PATH,\n      DEBUG: process.env.DEBUG,\n      NODE_DEBUG: process.env.NODE_DEBUG,\n      PORT: port,\n      HOST: host,\n      APPDATA: process.env.APPDATA, // for windows\n    };\n\n    log('Spawning', { command, env });\n\n    this.child = spawn(command, {\n      env,\n      detached: process.platform !== 'win32',\n      stdio: [ 'ignore', 'pipe', 'pipe' ],\n    });\n\n    this.child.once('exit', (code, signal) => {\n      log(`Child pid ${this.child.pid} has exited with ${code ? `code ${code}` : signal}`);\n      this.child = null;\n      this.isStopping = false;\n    });\n\n    return getMergedOutputs(this.child);\n  }\n\n  async stop() {\n    if (!this.child) return;\n\n    const exitPromise = new Bluebird(resolve => this.child.once('exit', resolve));\n\n    if (this.isStopping) {\n      await exitPromise;\n      return;\n    }\n\n    log('Stopping runner');\n\n    this.isStopping = true;\n\n    for (const signal of signalEscalations) {\n      await signal(this.child.pid);\n      await exitPromise.timeout(signalWaitTime).catchReturn();\n      if (!this.child) return;\n    }\n\n    throw new Error(`Could not kill process ${this.child.pid}`);\n  }\n\n  async forceStop() {\n    if (!this.child) return;\n    this.isStopping = true;\n\n    log('FORCE stopping runner');\n    await signalEscalations[signalEscalations.length - 1](this.child.pid);\n  }\n\n  async waitForServerAvailable() {\n    for (let remaining = connectAttempts; remaining > 0; remaining--) {\n      if (!this.child) {\n        log('Child closed unexpectedly');\n        break;\n      }\n\n      log('Waiting for server to become available. Attempts remaining: ', remaining);\n\n      const { ok, socket } = await connect(this.runConfig);\n\n      if (ok) {\n        socket.end();\n        return;\n      } else {\n        await Bluebird.delay(connectDelayMS);\n      }\n    }\n\n    throw new Error('Unable to connect to server.');\n  }\n\n  async waitForServerUnavailable() {\n    for (let remaining = connectAttempts; remaining > 0; remaining--) {\n      if (this.isStopping) {\n        log('Runner stopping');\n        break;\n      }\n\n      log('Waiting for server to become unavailable. Attempts remaining: ', remaining);\n\n      const { ok, socket } = await connect(this.runConfig);\n\n      if (ok) { // wait for the socket to fail\n        socket.end();\n        await Bluebird.delay(connectDelayMS);\n      } else {\n        return;\n      }\n    }\n\n    throw new Error('Timed out waiting for server to exit.');\n  }\n}\n\nfunction spawn(cmd, opts) {\n  const [ proc, ...args ] = parseShellCommand(cmd);\n  return libSpawn(proc, args, opts);\n}\n\nfunction connect({ host, port, timeout = connectTimeoutDelay }) {\n  log('connect', { host, port, timeout });\n\n  return new Bluebird(resolve => {\n    const socket = createConnection(port, host);\n\n    socket.setTimeout(timeout);\n\n    socket\n      .once('connect', () => resolve({ ok: true, socket }))\n      .once('error', error => resolve({ ok: false, error }));\n  });\n}\n\nfunction getMergedOutputs(child) {\n  const out = new PassThrough();\n\n  child.stdout.pipe(out);\n  child.stderr.pipe(out);\n\n  return getStream(out);\n}\n"]}