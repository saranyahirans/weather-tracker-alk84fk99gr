{"version":3,"sources":["../../../src/steps/support/response-watcher.js"],"names":["eventBroadcaster","setDefinitionFunctionWrapper","definition","supportCodeLibraryBuilder","options","stepDefinitions","wrapperOptions","watchResponses","fn","args","arguments","Bluebird","race","onResponseStatusCode","return","try","apply","statusCode","resolve","onResponse","data","on","once","removeListener"],"mappings":";;AAAA;;AACA;;;;;;AAEA,iCAAkB,CAAC,EAAEA,gBAAF,EAAoBC,4BAApB,EAAD,KAAwD;AACxE;AACA,OAAK,MAAMC,UAAX,IAAyBC,oCAA0BC,OAA1B,CAAkCC,eAA3D,EACEH,WAAWE,OAAX,CAAmBE,cAAnB,GAAoC,EAAEC,gBAAgB,IAAlB,EAApC;;AAEFN,+BAA6B,CAACO,EAAD,EAAKJ,OAAL,KAAiB;AAC5C,QAAI,CAACA,OAAD,IAAY,CAACA,QAAQG,cAAzB,EACE,OAAOC,EAAP;;AAEF,WAAO,YAAY;AACjB,YAAMC,OAAOC,SAAb;;AAEA,aAAOC,mBAASC,IAAT,CAAc,CACnBC,qBAAqB,GAArB,EAA0Bb,gBAA1B,EAA4Cc,MAA5C,CAAmD,SAAnD,CADmB,EAEnBH,mBAASI,GAAT,CAAa,MAAMP,GAAGQ,KAAH,CAAS,IAAT,EAAeP,IAAf,CAAnB,CAFmB,CAAd,CAAP;AAID,KAPD;AAQD,GAZD;AAaD,CAlBD;;AAoBA,SAASI,oBAAT,CAA8BI,UAA9B,EAA0CjB,gBAA1C,EAA4D;AAC1D,SAAO,IAAIW,kBAAJ,CAAaO,WAAW;AAC7B,aAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,UAAIA,KAAKH,UAAL,KAAoBA,UAAxB,EACEC;AACH;;AAEDlB,qBAAiBqB,EAAjB,CAAoB,UAApB,EAAgCF,UAAhC;;AAEAnB,qBAAiBsB,IAAjB,CAAsB,oBAAtB,EAA4C,MAC1CtB,iBAAiBuB,cAAjB,CAAgC,UAAhC,EAA4CJ,UAA5C,CADF;AAED,GAVM,CAAP;AAWD","file":"response-watcher.js","sourcesContent":["import { defineSupportCode, supportCodeLibraryBuilder } from 'cucumber';\nimport Bluebird from 'bluebird';\n\ndefineSupportCode(({ eventBroadcaster, setDefinitionFunctionWrapper }) => {\n  // auto-enroll all step definitions. Other support code can enroll themselves inline.\n  for (const definition of supportCodeLibraryBuilder.options.stepDefinitions)\n    definition.options.wrapperOptions = { watchResponses: true };\n\n  setDefinitionFunctionWrapper((fn, options) => {\n    if (!options || !options.watchResponses)\n      return fn;\n\n    return function () {\n      const args = arguments;\n\n      return Bluebird.race([\n        onResponseStatusCode(501, eventBroadcaster).return('pending'),\n        Bluebird.try(() => fn.apply(this, args)),\n      ]);\n    };\n  });\n});\n\nfunction onResponseStatusCode(statusCode, eventBroadcaster) {\n  return new Bluebird(resolve => {\n    function onResponse(data) {\n      if (data.statusCode === statusCode)\n        resolve();\n    }\n\n    eventBroadcaster.on('response', onResponse);\n\n    eventBroadcaster.once('test-case-finished', () =>\n      eventBroadcaster.removeListener('response', onResponse));\n  });\n}\n"]}